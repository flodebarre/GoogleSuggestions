source("~/Dropbox/Temp")
source("~/Dropbox/Temporaire/BirthdayCard/BCaRd.R")
Load the data#
data1 <- data.frame(W = c(1, 0, 1, 3, 2, 0, 1, 0), ##
                    g = c(0, 0, 1, 0, 0, 0, 0, 0), ##
                    gi= c(0,0 , 0, 1, 0, 0, 0, 0))#
#
data2 <- data.frame(W = c(1, 0, 1, 1, 0, 4, 0, 1), ##
                    g = c(0, 0, 0, 0, 1, 0, 0, 0), ##
                    gi= c(0, 0, 0, 0, 0, 1, 0, 0))#
#
data3 <- data.frame(W = c(0.5, 0.5, 1, 1, 2, 1, 1, 1), ##
                    g = c(1,   0,   0, 0, 0, 0, 0, 0), ##
                    gi= c(0,   1,   0, 0, 0, 0, 0, 0))#
#
# The results are supposed to be given with relative fitness#
addrelw <- function(namedat){#
  dat <- get(namedat)#
  out <- cbind(dat, w = dat$W / sum(dat$W))#
  return(out)#
}#
data <- lapply(c("data1", "data2", "data3"), addrelw)#
#
# But to get the Allen et al values we need to use absolute fitness#
getlm <- function(index){#
  dat <- data[[index]]#
  res <- lm(W ~ g + gi, data=dat)#
  return(res)#
}#
# Perform the multiple linear regression on the 3 datasets#
reslm <- lapply(1:3, getlm)#
# Print summaries of the results#
print(lapply(1:3, function(i) summary(reslm[[i]])))
????????????
)
?samepl
??sample
??rpois
?apply
avpopsize <- 20#
#
tfinal <- 25#
#
set.seed(123456789)#
#
pop <- c(rep(0, popsize/2), rep(1, popsize/2))#
popsize <- avpopsize#
#
makeoffspring <- function(wi, id){#
	return(rep(id, wi))	#
}
avpopsize <- 20#
#
tfinal <- 25#
#
set.seed(123456789)#
#
pop <- c(rep(0, avpopsize/2), rep(1, avpopsize/2))#
popsize <- avpopsize#
#
makeoffspring <- function(wi, id){#
	return(rep(id, wi))	#
}
w <- rpois(popsize, lambda=1)#
	np <- lapply(1:popsize, function(i) {makeoffspring(w[i], curpop[i])})
curpop <- pop
w <- rpois(popsize, lambda=1)#
	np <- lapply(1:popsize, function(i) {makeoffspring(w[i], curpop[i])})
w
np
unlist(np)
onegen <- function(curpop){#
	w <- rpois(length(curpop), lambda=1)#
	return(unlist(lapply(seq_along(curpop), function(i) {makeoffspring(w[i], curpop[i])})))#
}
seq_along
seq_along(1:4)
seq_along(0:4)
curpop
avpopsize <- 20#
#
tfinal <- 25#
#
set.seed(123456789)#
#
pop <- c(rep(0, avpopsize/2), rep(1, avpopsize/2))#
popsize <- avpopsize#
#
makeoffspring <- function(wi, id){#
	return(rep(id, wi))	#
}#
onegen <- function(curpop){#
	w <- rpois(length(curpop), lambda=1)#
	return(unlist(lapply(seq_along(curpop), function(i) {makeoffspring(w[i], curpop[i])})))#
}
onegen(pop)
?matrix
avpopsize <- 20#
#
tfinal <- 25#
#
set.seed(123456789)#
#
pop <- c(rep(0, avpopsize/2), rep(1, avpopsize/2))#
#
makeoffspring <- function(wi, id){#
	return(rep(id, wi))	#
}#
onegen <- function(curpop){#
	w <- rpois(length(curpop), lambda=1)#
	return(unlist(lapply(seq_along(curpop), function(i) {makeoffspring(w[i], curpop[i])})))#
}#
#
nplist <- matrix(0, nrow=tfinal, ncol=2)#
nplist[1,] <- c(sum(pop), mean(pop))#
#
for(t in 2:tfinal){#
	pop <- onegen(pop)#
	nplist[t,] <- c(sum(pop), mean(pop))#
}
nplist
avpopsize <- 20#
#
tfinal <- 25#
#
set.seed(123456789)#
#
pop <- c(rep(0, avpopsize/2), rep(1, avpopsize/2))#
#
makeoffspring <- function(wi, id){#
	return(rep(id, wi))	#
}#
onegen <- function(curpop){#
	w <- rpois(length(curpop), lambda=1)#
	return(unlist(lapply(seq_along(curpop), function(i) {makeoffspring(w[i], curpop[i])})))#
}#
#
nplist <- matrix(0, nrow=tfinal, ncol=2)#
nplist[1,] <- c(length(pop), mean(pop))#
#
for(t in 2:tfinal){#
	pop <- onegen(pop)#
	nplist[t,] <- c(length(pop), mean(pop))#
}#
print(nplist)
pop <- c(rep(0, avpopsize/2), rep(1, avpopsize/2))
avpopsize <- 20#
#
tfinal <- 25#
#
set.seed(123456789)#
#
pop <- c(rep(0, avpopsize/2), rep(1, avpopsize/2))#
#
makeoffspring <- function(wi, id){#
	return(rep(id, wi))	#
}#
onegen <- function(curpop){#
	w <- rpois(length(curpop), lambda=1)#
	return(unlist(lapply(seq_along(curpop), function(i) {makeoffspring(w[i], curpop[i])})))#
}#
#
nplist <- matrix(0, nrow=tfinal, ncol=2)#
nplist[1,] <- c(length(pop), mean(pop))#
#
onesim <- function(tf=20, avpopsize=20){#
	pop <- c(rep(0, avpopsize/2), rep(1, avpopsize/2))#
	for(t in 2:tf){#
		pop <- onegen(pop)#
		nplist[t,] <- c(length(pop), mean(pop))#
	}#
	print(nplist)#
}
onesim()
avpopsize <- 20#
#
tfinal <- 25#
#
set.seed(123456789)#
#
pop <- c(rep(0, avpopsize/2), rep(1, avpopsize/2))#
#
makeoffspring <- function(wi, id){#
	return(rep(id, wi))	#
}#
onegen <- function(curpop){#
	w <- rpois(length(curpop), lambda=1)#
	return(unlist(lapply(seq_along(curpop), function(i) {makeoffspring(w[i], curpop[i])})))#
}#
#
onesim <- function(tf=20, avpopsize=20){#
	pop <- c(rep(0, avpopsize/2), rep(1, avpopsize/2))#
	nplist <- matrix(0, nrow=tf, ncol=2)#
	nplist[1,] <- c(length(pop), mean(pop))#
	for(t in 2:tf){#
		pop <- onegen(pop)#
		nplist[t,] <- c(length(pop), mean(pop))#
	}#
	print(nplist)#
}
onesim()
avpopsize <- 20#
#
tfinal <- 25#
#
set.seed(123456789)#
#
pop <- c(rep(0, avpopsize/2), rep(1, avpopsize/2))#
#
makeoffspring <- function(wi, id){#
	return(rep(id, wi))	#
}#
onegen <- function(curpop){#
	w <- rpois(length(curpop), lambda=1)#
	return(unlist(lapply(seq_along(curpop), function(i) {makeoffspring(w[i], curpop[i])})))#
}#
#
onesim <- function(tf=40, avpopsize=20){#
	pop <- c(rep(0, avpopsize/2), rep(1, avpopsize/2))#
	nplist <- matrix(0, nrow=tf, ncol=2)#
	nplist[1,] <- c(length(pop), mean(pop))#
	for(t in 2:tf){#
		pop <- onegen(pop)#
		nplist[t,] <- c(length(pop), mean(pop))#
	}#
	print(nplist)#
}
onesim()
?font.import()
require(extrafont)
?font.import()
fonts()
fonttable()
cat("We need to import some fonts to be able to use Arial in the figures. Please type "y" to the question below, and be patient as downloading the fonts may take some time (sorry about that!). \n")
cat("We need to import some fonts to be able to use Arial in the figures. Please type y to the question below, and be patient as downloading the fonts may take some time (sorry about that!). \n")
fonttable()
q()
b <- sqrt(-1)
??complex
Florence Debarre et al.                          ###
## __Multidimensional (co)evolutionary stability__  ###
##           (c)FD2013                              ###
#
###
## FUNCTION DEFINITIONS#
## Functions to draw random matrices and manipulate them.#
###
#
## - Drawing random matrices -------------------------------#
#
# Draw a random matrix#
randmat <- function(dim, minmax=1){#
  # Draw a matrix with coefficients sampled uniformly btw -minmax and +minmax#
  a <- matrix(runif(dim^2, min=-minmax, max=minmax), dim, dim)#
  return(a)#
}#
#
# Draw a random symmetric matrix#
randsym <- function(dim, minmax=1){#
  # draw a random matrix#
  a <- randmat(dim, minmax=minmax)#
  # then return the mean of a and the transposition of a #
  # = symmetric matrix, with values in -minmax, +minmax#
  return(( a + t(a))/2)#
}#
#
# Draw a random positive definite matrix#
# construted as the square of a symmetric matrix#
posdef <- function(dim, minmax=1){#
  # draw a random symmetric matrix#
  b <- randsym(dim, minmax=minmax)#
  # then return b^2, the square of the b matrix, which is a positive definite matrix. #
  return(b%*%b)#
}#
#
# Function to check that a matrix is positive definite, if ever needed#
checkpos <- function(m){#
  return(all(eigen(m)$values>0))#
}#
#
## - Manipulate matrices ------------------------------------#
#
# We will want to assess the effect of adding off diagonal elements#
# corresponding to epistasis (in the fitness matrices) or to correlations among traits (in the G matrix)#
#
# Only keep the diagonal of a matrix#
# (this is not diagonalization)#
makediag <- function(M, dim){#
  if(dim==1){#
    out <- M#
  }else{#
    out <- diag(diag(M), dim, dim)#
  }#
  return(out)#
}#
#
# For a block matrix: keep the diagonals of the blocs#
blocdiag <- function(M, dim){#
  # M is a (2dim)*(2dim) matrix#
  c <- 1:dim#
  M11 <- M[c, c]#
  M12 <- M[c, c+dim]#
  M21 <- M[c+dim, c]#
  M22 <- M[c+dim, c+dim]#
  return(rbind(cbind(makediag(M11, dim), makediag(M12, dim)), cbind(makediag(M21, dim), makediag(M22, dim))))#
}#
#
## - Find eigenvalues ----------------------------------#
#
# Find the _sign_ of the max eigenvalues#
maxev <- function(Mat){#
  #  max(Re(eigen(Mat)$values))#
  return( isTRUE(max(Re(eigen(Mat)$values)) <=0)*1)#
}#
#
## - Other functions ---------------------------------#
#
# Function that combines unlist and mean#
# necessary to compute the mean of an array whose elements are 1-element lists,#
# as returned by replicate.#
ulm <- function(vec){#
  mean(unlist(vec))#
}
cr <- function(n){checkpos(posdef(n))}
?replicate
test <- replicate(1000, cr)
test
test <- replicate(1000, cr(4))
test
all(replicate(1000, cr(4)))
all(replicate(10000, cr(4)))
library("deSolve")#
parms <- c(beta=1e-3, r=1e-1)#
inits <- c(S=499, I=1)#
dt <- seq(0,100,0.1)#
SIR <- function(t, x, parms){#
with(as.list(c(parms,x)),{#
dS <- - beta*S*I#
dI <- + beta*S*I - r*I#
dR <- r*I#
der <- c(dS, dI,dR)#
list(der) # the output must be returned#
}) # end of 'with'#
} # end of function definition#
simulation <- as.data.frame(lsoda(inits, dt, SIR, parms=parms))
install.packages("deSolve")
library("deSolve")#
parms <- c(beta=1e-3, r=1e-1)#
inits <- c(S=499, I=1)#
dt <- seq(0,100,0.1)#
SIR <- function(t, x, parms){#
with(as.list(c(parms,x)),{#
dS <- - beta*S*I#
dI <- + beta*S*I - r*I#
dR <- r*I#
der <- c(dS, dI,dR)#
list(der) # the output must be returned#
}) # end of 'with'#
} # end of function definition#
simulation <- as.data.frame(lsoda(inits, dt, SIR, parms=parms))
library("deSolve")#
parms <- c(beta=1e-3, r=1e-1)#
inits <- c(S=499, I=1, R=0)#
dt <- seq(0,100,0.1)#
SIR <- function(t, x, parms){#
with(as.list(c(parms,x)),{#
dS <- - beta*S*I#
dI <- + beta*S*I - r*I#
dR <- r*I#
der <- c(dS, dI,dR)#
list(der) # the output must be returned#
}) # end of 'with'#
} # end of function definition#
simulation <- as.data.frame(lsoda(inits, dt, SIR, parms=parms))
Starting script to the module 'SIR models of epidemics'#
###########################################################
#
# implements the basic SIR model, and plots simulation results#
#
## Here you only need to know basic things:#
##  #	To make comments#
##  <-	Assigning a value to a symbol#
##  c	To create a vector c(v1, v2, ..., vn)#
##  e	is *10^#
##  seq(a,b,c)	To create a sequence from a to b with intervals c#
####################################
# FUNCTION DEFINITIONS#
####################################
#
####
# SIR <- function(t, x, parms)#
# Use: calculates the derivatives for the SIR model#
# Input: #
#      t: time (not used here, because there is no explicit time dependence)#
#      x: vector of the current values of all variables (S, I, R)#
#      parms: vector of all parameter values#
# Output:#
#      der: vector of derivatives#
#
# To use the lsoda function, the model function has to be a function of t (time),#
# x (the vector of the variables) and parms (the parameters of the model).#
#
SIR <- function(t, x, parms){#
#
# Beta and r are not global variables. This means that if you type beta in R, the output will be 'beta',#
# and not its value. You have to specify that you want to use the value of beta from 'parms' to solve the ODEs.#
# Similarly, the variables of the model are taken from the vector x. This is done by the 'with' function.#
#
  with(as.list(c(parms,x)),{#
    dS <- - beta*S*I#
    dI <- + beta*S*I - r*I#
    dR <- r*I         # Note: because S+I+R=constant, this equation could actually be omitted,#
                  # and R at any time point could simply be calculated as N-S-I.#
    der <- c(dS, dI,dR)#
    list(der)  # the output must be returned    #
  }) # end of 'with'#
#
}  # end of function definition#
############################
# MAIN PROGRAM#
############################
#
### LOAD LIBRARIES#
#load R library for ordinary differential equation solvers#
library(deSolve)#
#
### INITIALIZE PARAMETER SETTINGS#
#
parms <- c(beta=1e-3, r=1e-1)		# set the parameters of the model#
inits <- c(S=499, I=1, R=0)		# set the initial values#
dt    <- seq(0,100,0.1)			# set the time points for evaluation#
#
# Calculate and print R_0 on the screen#
N <- sum(inits)#
R_0 <- with(as.list(parms),{beta*N/r})#
print(paste("R_0 =",R_0),quote=FALSE)#
### SIMULATE THE MODEL#
#
## Use lsoda to solve the differential equations numerically. The syntax should be#
## lsoda(initial values, time points, function, parameters)#
#
simulation <- as.data.frame(lsoda(inits, dt, SIR, parms=parms)) # this way our set 'parms' will be used as default#
#
### PLOT THE OUTPUT#
#
# If you remove the # before pdf(...) and dev.off(), the output will be written in a pdf file,#
# in the working directory. If you don't, a window containing your graph will just pop up.#
#
#pdf("startingscript.pdf")#
#
# Plot S according to time, in blue, and add the graph I and R according to time,#
# in red and dark green respectively. Call help(plot) for further details.#
#
attach(simulation) # this command allows you to refer to the columns of the data frame directly.#
#
plot(dt, S, type="l", col="blue", ylim=c(0,sum(inits)), xlab="time", ylab="number of individuals")#
lines(dt, I, type="l", col="red")#
lines(dt, R, type="l", col="darkgreen")#
#
# Add a legend to the graph#
legend(70,400, legend=c("S","I","R"), col=c("blue", "red", "darkgreen"), lty=rep(1,3))#
#dev.off()#
#
detach(simulation) # clean up the search path
a <- runif(100)
b <- runif(100)
y <- a+b
sd(y)
sqrt(sd(a)^2+sd(b)^2)
q()
?cov
cov(a,b)
sqrt(sd(a)^2+sd(b)^2+2*cov(a,b))
q()
????????read
?????
q
???a
????a
q()
curve(function(x){exp(1/((x/2)^2-1))}, from=-4,to=4)
?curve
curve(exp(1/((x/2)^2-1)), from=-4,to=4)
curve(exp(1/((x/2)^2-1)), from=-2,to=2)
thefun <- function(x, w=2){
if(x>=-w | w<=w){exp(1/((x/w)^2-1))}else{0}
}
curve(thefun, -2,2)
thefun <- function(x, w=2){
if(x>-w | x<w){exp(1/((x/w)^2-1))}else{0}
}
curve(thefun, -2,2)
?"|"
if(x>-w | x<w){out <- exp(1/((x/w)^2-1))}else{out <- 0}; return(out)
thefun <- function(x, w=2){
if(x>-w | x<w){out <- exp(1/((x/w)^2-1))}else{out <- 0}; return(out)}
thefun(1)
thefun(2)
curve(thefun, -2,2)
curve(thefun, -4,4)
cite()
citation()
setwd()
setwd()
setwd("Documents/Work/Sandbox/GoogleSuggestions/")
?read.csv
tab <- read.csv("aaas.csv", header=FALSE)
tab
tab$V2
sum(V2=="F")
sum(tab$V2=="F")
mean(tab$V2=="F")
length(tab$V2)
?read
??read
catname <- "aaas"#
#
tab <- read.csv(paste(catname, ".csv", sep=""), header=FALSE)#
wife <- scan(paste(catname, "_wife.txt", sep=""))#
husband <- scan(paste(catname, "_husband.txt", sep=""))
wife
1-wife
1-husband
catname <- "aaas"#
#
getdata <- function(catname){#
	tab <- read.csv(paste(catname, ".csv", sep=""), header=FALSE)#
	wife <- scan(paste(catname, "_wife.txt", sep=""))#
	husband <- scan(paste(catname, "_husband.txt", sep=""))#
	n <- length(wife)#
	t2 <- cbind(tab, wife=1-wife, husband=1-husband, cat=rep(catname, n))#
	return(t2)#
}#
#
t1 <- getdata("aaas")
t1
t.ted <- getdata("ted")
t.ted <- getdata("ted")
t.ted
duplicated(t.ted$V1)
t.aaas <- getdata("aaas")
t.ted <- getdata("ted")
catname <- "aaas"#
#
getdata <- function(catname){#
	tab <- read.csv(paste(catname, ".csv", sep=""), header=FALSE)#
	# Find duplicates#
	dupl <- duplicated(tad$V1)#
	print(tab[dupl,1])#
	print(tab$V1)#
	wife <- scan(paste(catname, "_wife.txt", sep=""))#
	husband <- scan(paste(catname, "_husband.txt", sep=""))#
	n <- length(wife)#
	t2 <- cbind(tab, wife=1-wife, husband=1-husband, cat=rep(catname, n))#
	return(t2)#
}#
#
t.aaas <- getdata("aaas")#
t.ted <- getdata("ted")
catname <- "aaas"#
#
getdata <- function(catname){#
	tab <- read.csv(paste(catname, ".csv", sep=""), header=FALSE)#
	# Find duplicates#
	dupl <- duplicated(tab$V1)#
	print(tab[dupl,1])#
	print(tab$V1)#
	wife <- scan(paste(catname, "_wife.txt", sep=""))#
	husband <- scan(paste(catname, "_husband.txt", sep=""))#
	n <- length(wife)#
	t2 <- cbind(tab, wife=1-wife, husband=1-husband, cat=rep(catname, n))#
	return(t2)#
}#
#
t.aaas <- getdata("aaas")#
t.ted <- getdata("ted")
catname <- "aaas"#
#
getdata <- function(catname){#
	tab <- read.csv(paste(catname, ".csv", sep=""), header=FALSE)#
	# Find duplicates#
	dupl <- duplicated(tab$V1)#
	print(dupl)#
	print(tab[dupl,1])#
	print(tab$V1=="Helen Fisher")#
	wife <- scan(paste(catname, "_wife.txt", sep=""))#
	husband <- scan(paste(catname, "_husband.txt", sep=""))#
	n <- length(wife)#
	t2 <- cbind(tab, wife=1-wife, husband=1-husband, cat=rep(catname, n))#
	return(t2)#
}#
#
t.aaas <- getdata("aaas")#
t.ted <- getdata("ted")
catname <- "aaas"#
#
getdata <- function(catname){#
	tab <- read.csv(paste(catname, ".csv", sep=""), header=FALSE)#
	# Find duplicates#
	dupl <- duplicated(tab$V1)#
	print(dupl)#
	print(tab[dupl,1])#
	print(tab$V1=="Bill Gates")#
	wife <- scan(paste(catname, "_wife.txt", sep=""))#
	husband <- scan(paste(catname, "_husband.txt", sep=""))#
	n <- length(wife)#
	t2 <- cbind(tab, wife=1-wife, husband=1-husband, cat=rep(catname, n))#
	return(t2)#
}#
#
t.aaas <- getdata("aaas")#
t.ted <- getdata("ted")
catname <- "aaas"#
#
getdata <- function(catname){#
	tmp <- read.csv(paste(catname, ".csv", sep=""), header=FALSE)#
	# Find duplicates#
	dupl <- duplicated(tmp$V1)#
#
	wife <- scan(paste(catname, "_wife.txt", sep=""))#
	husband <- scan(paste(catname, "_husband.txt", sep=""))#
	n <- length(wife) - length(dupl)#
	# Combine data, removing duplicates#
	t2 <- cbind(tab[!dupl,], wife=1-wife[!dupl], husband=1-husband[!dupl], cat=rep(catname, n))#
	return(t2)#
}#
#
t.aaas <- getdata("aaas")#
t.ted <- getdata("ted")
catname <- "aaas"#
#
getdata <- function(catname){#
	tmp <- read.csv(paste(catname, ".csv", sep=""), header=FALSE)#
	# Find duplicates#
	dupl <- duplicated(tmp$V1)#
#
	wife <- scan(paste(catname, "_wife.txt", sep=""))#
	husband <- scan(paste(catname, "_husband.txt", sep=""))#
	n <- length(wife) - length(dupl)#
	# Combine data, removing duplicates#
	t2 <- cbind(tmp[!dupl,], wife=1-wife[!dupl], husband=1-husband[!dupl], cat=rep(catname, n))#
	return(t2)#
}#
#
t.aaas <- getdata("aaas")#
t.ted <- getdata("ted")
catname <- "aaas"#
#
getdata <- function(catname){#
	tmp <- read.csv(paste(catname, ".csv", sep=""), header=FALSE)#
	# Find duplicates#
	dupl <- duplicated(tmp$V1)#
#
	wife <- scan(paste(catname, "_wife.txt", sep=""))#
	husband <- scan(paste(catname, "_husband.txt", sep=""))#
	n <- length(wife) - length(dupl)#
	print(tmp[!dupl,])#
	# Combine data, removing duplicates#
	t2 <- cbind(tmp[!dupl,], wife=1-wife[!dupl], husband=1-husband[!dupl], cat=rep(catname, n))#
	return(t2)#
}#
#
t.aaas <- getdata("aaas")#
t.ted <- getdata("ted")
catname <- "aaas"#
#
getdata <- function(catname){#
	tmp <- read.csv(paste(catname, ".csv", sep=""), header=FALSE)#
	# Find duplicates#
	dupl <- duplicated(tmp$V1)#
#
	wife <- scan(paste(catname, "_wife.txt", sep=""))#
	husband <- scan(paste(catname, "_husband.txt", sep=""))#
	n <- length(wife) - length(dupl)#
	print(1-wife[!dupl])#
	# Combine data, removing duplicates#
	t2 <- cbind(tmp[!dupl,], wife=1-wife[!dupl], husband=1-husband[!dupl], cat=rep(catname, n))#
	return(t2)#
}#
#
t.aaas <- getdata("aaas")#
t.ted <- getdata("ted")
catname <- "aaas"#
#
getdata <- function(catname){#
	tmp <- read.csv(paste(catname, ".csv", sep=""), header=FALSE)#
	# Find duplicates#
	dupl <- duplicated(tmp$V1)#
#
	wife <- scan(paste(catname, "_wife.txt", sep=""))#
	husband <- scan(paste(catname, "_husband.txt", sep=""))#
	n <- length(wife) - sum(dupl)#
	print(1-wife[!dupl])#
	# Combine data, removing duplicates#
	t2 <- cbind(tmp[!dupl,], wife=1-wife[!dupl], husband=1-husband[!dupl], cat=rep(catname, n))#
	return(t2)#
}#
#
t.aaas <- getdata("aaas")#
t.ted <- getdata("ted")
catname <- "aaas"#
#
getdata <- function(catname){#
	tmp <- read.csv(paste(catname, ".csv", sep=""), header=FALSE)#
	# Find duplicates#
	dupl <- duplicated(tmp$V1)#
#
	wife <- scan(paste(catname, "_wife.txt", sep=""))#
	husband <- scan(paste(catname, "_husband.txt", sep=""))#
	n <- length(wife) - sum(dupl)#
	# Combine data, removing duplicates#
	t2 <- cbind(tmp[!dupl,], wife=1-wife[!dupl], husband=1-husband[!dupl], cat=rep(catname, n))#
	return(t2)#
}#
#
t.aaas <- getdata("aaas")#
t.ted <- getdata("ted")
t.aaas
t.ted <- getdata("ted")
t.ted
t.aaas <- getdata("aaas")#
t.ted <- getdata("ted")#
t.tennis <- getdata("tennis")#
t.actors <- getdata("actors")
t.actors
sum(t.ted$V2=="F")
sum(t.ted$V2=="M")
length(t.ted$V2)
?apply
Compute number of F, M, F husband, ...#
countsuggestions <- function(cat){#
	tab <- get(paste("t.", cat, sep=""))#
	nF <- sum(tab$V2=="F")#
	nM <- sum(tab$V2=="M")#
	nFw <- sum(tab$V2=="F" && tab$wife==1)#
	nMw <- sum(tab$V2=="M" && tab$wife==1)#
	nFh <- sum(tab$V2=="F" && tab$husband==1)#
	nMh <- sum(tab$V2=="M" && tab$husband==1)#
	out <- c(cat=cat, nF=nF, nM=nM, nFw=nFw, nMw=nMw, nFh=nFh, nMh=nMh)#
}#
#
x <- lapply(list("actors", "tennis", "ted", "aaas"), countsuggestions)
x
t.tennis
sum(t.tennis$wife)
sum(t.tennis$V2==2)
sum(t.tennis$V2=="F")
t.tennis$V2=="
F"
t.tennis$V2
t.tennis$V2==F
t.tennis$V2=="F"
t.tennis$V2=="F" && t.tennis$wife==1
t.tennis$V2=="F" & t.tennis$wife==1
Compute number of F, M, F husband, ...#
countsuggestions <- function(cat){#
	tab <- get(paste("t.", cat, sep=""))#
	nF <- sum(tab$V2=="F")#
	nM <- sum(tab$V2=="M")#
	nFw <- sum(tab$V2=="F" & tab$wife==1)#
	nMw <- sum(tab$V2=="M" & tab$wife==1)#
	nFh <- sum(tab$V2=="F" & tab$husband==1)#
	nMh <- sum(tab$V2=="M" & tab$husband==1)#
	out <- c(cat=cat, nF=nF, nM=nM, nFw=nFw, nMw=nMw, nFh=nFh, nMh=nMh)#
}#
#
x <- lapply(list("actors", "tennis", "ted", "aaas"), countsuggestions)
x
t.ted
t.ted[t.ted$V2=="F" & t.ted$wife==1]
t.ted[t.ted$V2=="F" & t.ted$wife==1,]
t.ted[t.ted$V2=="M" & t.ted$husband==1,]
x
unlist(x)
matrix(unlist(x), byrow=TRUE, nrow=4)
cats <- list("actors", "tennis", "ted", "aaas")#
x <- cbind(unlist(cats), matrix(unlist(lapply(cats, countsuggestions)), byrow = TRUE, nrow = length(cats)))
x
Compute number of F, M, F husband, ...#
countsuggestions <- function(cat){#
	tab <- get(paste("t.", cat, sep=""))#
	nF <- sum(tab$V2=="F")#
	nM <- sum(tab$V2=="M")#
	nFw <- sum(tab$V2=="F" & tab$wife==1)#
	nMw <- sum(tab$V2=="M" & tab$wife==1)#
	nFh <- sum(tab$V2=="F" & tab$husband==1)#
	nMh <- sum(tab$V2=="M" & tab$husband==1)#
	out <- c(nF=nF, nM=nM, nFw=nFw, nMw=nMw, nFh=nFh, nMh=nMh)#
}#
#
cats <- list("actors", "tennis", "ted", "aaas")#
x <- cbind(unlist(cats), matrix(unlist(lapply(cats, countsuggestions)), byrow = TRUE, nrow = length(cats)))
x
Compute number of F, M, F husband, ...#
countsuggestions <- function(cat){#
	tab <- get(paste("t.", cat, sep=""))#
	nF <- sum(tab$V2=="F")#
	nM <- sum(tab$V2=="M")#
	nFw <- sum(tab$V2=="F" & tab$wife==1)#
	nMw <- sum(tab$V2=="M" & tab$wife==1)#
	nFh <- sum(tab$V2=="F" & tab$husband==1)#
	nMh <- sum(tab$V2=="M" & tab$husband==1)#
	out <- c(nF=nF, nM=nM, nFw=nFw, nMw=nMw, nFh=nFh, nMh=nMh)#
}#
#
cats <- list("actors", "tennis", "ted", "aaas")#
x <- matrix(unlist(lapply(cats, countsuggestions)), byrow = TRUE, nrow = length(cats))
x
xx <- cbind(cat=cats, x)
xx
xx <- cbind(cat=unlist(cats), x)#
xx
yy <- as.data.frame(cat=unlist(cats))
yy <- data.frame(cat=unlist(cats))
yy
xx <- cbind(data.frame(cat=unlist(cats)), x)#
xx
xx$cat
xx$1
xx$"1"
cts <- lapply(cats, countsuggestions)
names(cts)
cts
names(cts[[1]])
x <- data.frame(matrix(unlist(cts), byrow = TRUE, nrow = length(cats)), names=names(cts[[1]]))#
xx <- cbind(data.frame(cat=unlist(cats)), x)#
xx
??data.frame
?lapply
cts <- sapply(cats, countsuggestions)
cts
Compute number of F, M, F husband, ...#
countsuggestions <- function(cat){#
	tab <- get(paste("t.", cat, sep=""))#
	nF <- sum(tab$V2=="F")#
	nM <- sum(tab$V2=="M")#
	nFw <- sum(tab$V2=="F" & tab$wife==1)#
	nMw <- sum(tab$V2=="M" & tab$wife==1)#
	nFh <- sum(tab$V2=="F" & tab$husband==1)#
	nMh <- sum(tab$V2=="M" & tab$husband==1)#
	out <- matrix(c(nF=nF, nM=nM, nFw=nFw, nMw=nMw, nFh=nFh, nMh=nMh), nrow=1)#
}#
#
cats <- list("actors", "tennis", "ted", "aaas")#
cts <- sapply(cats, countsuggestions)
cts
??sapply
?sapply
Combine data for a given "category"#
getdata <- function(catname){#
	tmp <- read.csv(paste(catname, ".csv", sep=""), header=FALSE)#
	# Find duplicates#
	dupl <- duplicated(tmp$V1)#
#
	wife <- scan(paste(catname, "_wife.txt", sep=""))#
	husband <- scan(paste(catname, "_husband.txt", sep=""))#
	n <- length(wife) - sum(dupl)#
	# Combine data, removing duplicates#
	t2 <- cbind(tmp[!dupl,], wife=1-wife[!dupl], husband=1-husband[!dupl], cat=rep(catname, n))#
	return(t2)#
}#
#
t.aaas <- getdata("aaas")#
t.ted <- getdata("ted")#
t.tennis <- getdata("tennis")#
t.actors <- getdata("actors")#
#
# Compute number of F, M, F husband, ...#
countsuggestions <- function(cat){#
	tab <- get(paste("t.", cat, sep=""))#
	nF <- sum(tab$V2=="F")#
	nM <- sum(tab$V2=="M")#
	nFw <- sum(tab$V2=="F" & tab$wife==1)#
	nMw <- sum(tab$V2=="M" & tab$wife==1)#
	nFh <- sum(tab$V2=="F" & tab$husband==1)#
	nMh <- sum(tab$V2=="M" & tab$husband==1)#
	out <- c(nF=nF, nM=nM, nFw=nFw, nMw=nMw, nFh=nFh, nMh=nMh)#
}#
#
cats <- list("actors", "tennis", "ted", "aaas")#
cts <- t(sapply(cats, countsuggestions))#
x <- data.frame(matrix(unlist(cts), byrow = TRUE, nrow = length(cats)), names=names(cts[[1]]))#
xx <- cbind(data.frame(cat=unlist(cats)), x)#
xx
cts
xx$tennis
xx["tennis",]
xx[xx$cat=="tennis",]
names(xx)
names(x)
names(cts)
cts
?names
dimnames(cts)
cats <- list("actors", "tennis", "ted", "aaas")#
cts <- t(sapply(cats, countsuggestions))#
x <- data.frame(matrix(unlist(cts), byrow = TRUE, nrow = length(cats)), names=names(cts[[1]]))#
xx <- cbind(data.frame(cat=unlist(cats)), x)#
names(xx, c("cat", dimnames(cts)[[2]]))#
xx
?names
x <- data.frame(matrix(unlist(cts), byrow = TRUE, nrow = length(cats)), names=names(cts[[1]]))#
xx <- cbind(data.frame(cat=unlist(cats)), x)#
names(xx) <- c("cat", dimnames(cts)[[2]])#
xx
xx
x <- data.frame(matrix(unlist(cts), byrow = TRUE, nrow = length(cats)))#
xx <- cbind(data.frame(cat=unlist(cats)), x)#
names(xx) <- c("cat", dimnames(cts)[[2]])#
xx
?with
plotfracs <- function(cat){#
	lin <- xx[xx$cat==cat,]#
	dx <- 0.15#
	xpos <- c(1-dx, 1+dx)#, 2-dx, 2+dx)#
	ypos <- with(lin, c(nMh/nM, nMw/nM))#
	plot(xpos, ypos)#
}#
plotfracs("tennis")
plotfracs <- function(cat){#
	lin <- xx[xx$cat==cat,]#
	print(lin)#
	dx <- 0.15#
	xpos <- c(1-dx, 1+dx)#, 2-dx, 2+dx)#
	ypos <- with(lin, c(nMh/nM, nMw/nM))#
	plot(xpos, ypos)#
}#
plotfracs("tennis")
Compute number of F, M, F husband, ...#
countsuggestions <- function(cat){#
	tab <- get(paste("t.", cat, sep=""))#
	nF <- sum(tab$V2=="F")#
	nM <- sum(tab$V2=="M")#
	nFw <- sum(tab$V2=="F" & tab$wife==1)#
	nMw <- sum(tab$V2=="M" & tab$wife==1)#
	nFh <- sum(tab$V2=="F" & tab$husband==1)#
	nMh <- sum(tab$V2=="M" & tab$husband==1)#
	out <- c(nF=nF, nM=nM, nFw=nFw, nMw=nMw, nFh=nFh, nMh=nMh)#
}#
#
cats <- list("actors", "tennis", "ted", "aaas")#
cts <- t(sapply(cats, countsuggestions))#
x <- data.frame(matrix(unlist(cts), byrow = TRUE, nrow = length(cats)))#
xx <- cbind(data.frame(cat=unlist(cats)), x)#
names(xx) <- c("cat", dimnames(cts)[[2]])#
xx
cts
sapply(cats, countsuggestions)
cts <- t(sapply(cats, countsuggestions))#
x <- data.frame(cts)#
xx <- cbind(data.frame(cat=unlist(cats)), x)#
names(xx) <- c("cat", dimnames(cts)[[2]])#
xx
plotfracs <- function(cat){#
	lin <- xx[xx$cat==cat,]#
	print(lin)#
	dx <- 0.15#
	xpos <- c(1-dx, 1+dx)#, 2-dx, 2+dx)#
	ypos <- with(lin, c(nMh/nM, nMw/nM))#
	plot(xpos, ypos)#
}#
plotfracs("tennis")
plotfracs <- function(cat){#
	lin <- xx[xx$cat==cat,]#
	print(lin)#
	dx <- 0.15#
	xpos <- c(1-dx, 1+dx, 2-dx, 2+dx)#
	ypos <- with(lin, c(nMh/nM, nMw/nM, nFh/nF, nFw/nF))#
	plot(xpos, ypos, ylim=c(0,1), col=c("blue", "blue", "pink", "pink"))#
}#
plotfracs("tennis")
?rgb
colM <- rgb(0, 150, 150, maxColorValue = 255)#
colF <- rgb(249, 113, 0, maxColorValue = 255)#
plotfracs <- function(cat){#
	lin <- xx[xx$cat==cat,]#
	print(lin)#
	dx <- 0.15#
	xpos <- c(1-dx, 1+dx, 2-dx, 2+dx)#
	ypos <- with(lin, c(nMh/nM, nMw/nM, nFh/nF, nFw/nF))#
	plot(xpos, ypos, ylim=c(0,1), col=c(colM, colM, colF, colF), type="h", pch=15)#
}#
plotfracs("tennis")
colM <- rgb(0, 150, 150, maxColorValue = 255)#
colF <- rgb(249, 113, 0, maxColorValue = 255)#
plotfracs <- function(cat){#
	lin <- xx[xx$cat==cat,]#
	print(lin)#
	dx <- 0.15#
	xpos <- c(1-dx, 1+dx, 2-dx, 2+dx)#
	ypos <- with(lin, c(nMh/nM, nMw/nM, nFh/nF, nFw/nF))#
	plot(xpos, ypos, ylim=c(0,1), col=c(colM, colM, colF, colF), type="h", pch=15, lwd=5)#
}#
plotfracs("tennis")
colM <- rgb(0, 150, 150, maxColorValue = 255)#
colF <- rgb(249, 113, 0, maxColorValue = 255)#
plotfracs <- function(cat){#
	lin <- xx[xx$cat==cat,]#
	print(lin)#
	dx <- 0.15#
	xpos <- c(1-dx, 1+dx, 2-dx, 2+dx)#
	ypos <- with(lin, c(nMh/nM, nMw/nM, nFh/nF, nFw/nF))#
	plot(xpos, ypos, ylim=c(0,1), col=c(colM, colM, colF, colF), type="h", pch=15, lwd=5, axes = FALSE)#
	axis(2, las=1)#
}#
plotfracs("tennis")
colM <- rgb(0, 150, 150, maxColorValue = 255)#
colF <- rgb(249, 113, 0, maxColorValue = 255)#
plotfracs <- function(cat){#
	lin <- xx[xx$cat==cat,]#
	print(lin)#
	dx <- 0.15#
	xpos <- c(1-dx, 1+dx, 2-dx, 2+dx)#
	ypos <- with(lin, c(nMh/nM, nMw/nM, nFh/nF, nFw/nF))#
	plot(xpos, ypos, ylim=c(0,1), col=c(colM, colM, colF, colF), type="h", pch=15, lwd=5, axes = FALSE, ylim="Proportion")#
	axis(2, las=1)#
	axis(1, at=xpos, labels=c("h", "w", "h", "w"))#
}#
plotfracs("tennis")
?axis
colM <- rgb(0, 150, 150, maxColorValue = 255)#
colF <- rgb(249, 113, 0, maxColorValue = 255)#
plotfracs <- function(cat){#
	lin <- xx[xx$cat==cat,]#
	print(lin)#
	dx <- 0.15#
	xpos <- c(1-dx, 1+dx, 2-dx, 2+dx)#
	ypos <- with(lin, c(nMh/nM, nMw/nM, nFh/nF, nFw/nF))#
	plot(xpos, ypos, ylim=c(0,1), col=c(colM, colM, colF, colF), type="h", pch=15, lwd=5, axes = FALSE, ylab="Proportion")#
	axis(2, las=1)#
	axis(1, at=xpos, labels=c("h", "w", "h", "w"))#
}#
plotfracs("tennis")
?axis
colM <- rgb(0, 150, 150, maxColorValue = 255)#
colF <- rgb(249, 113, 0, maxColorValue = 255)#
plotfracs <- function(cat){#
	lin <- xx[xx$cat==cat,]#
	print(lin)#
	dx <- 0.15#
	xpos <- c(1-dx, 1+dx, 2-dx, 2+dx)#
	ypos <- with(lin, c(nMh/nM, nMw/nM, nFh/nF, nFw/nF))#
	plot(xpos, ypos, ylim=c(0,1), col=c(colM, colM, colF, colF), type="h", pch=15, lwd=5, axes = FALSE, ylab="Proportion", xlab="")#
	axis(2, las=1)#
	axis(1, at=xpos, labels=c("h", "w", "h", "w"))#
	axis(1, at=c(1, 2), labels=c("M", "F"), line=3, tick=FALSE)#
}#
plotfracs("tennis")
colM <- rgb(0, 150, 150, maxColorValue = 255)#
colF <- rgb(249, 113, 0, maxColorValue = 255)#
plotfracs <- function(cat){#
	lin <- xx[xx$cat==cat,]#
	print(lin)#
	dx <- 0.15#
	xpos <- c(1-dx, 1+dx, 2-dx, 2+dx)#
	ypos <- with(lin, c(nMh/nM, nMw/nM, nFh/nF, nFw/nF))#
	plot(xpos, ypos, ylim=c(0,1), col=c(colM, colM, colF, colF), type="h", pch=15, lwd=5, axes = FALSE, ylab="Proportion", xlab="")#
	axis(2, las=1)#
	axis(1, at=xpos, labels=c("h", "w", "h", "w"))#
	axis(1, at=c(1, 2), labels=c("M", "F"), line=2, tick=FALSE)#
}#
plotfracs("tennis")
colM <- rgb(0, 150, 150, maxColorValue = 255)#
colF <- rgb(249, 113, 0, maxColorValue = 255)#
plotfracs <- function(cat){#
	lin <- xx[xx$cat==cat,]#
	print(lin)#
	dx <- 0.15#
	xpos <- c(1-dx, 1+dx, 2-dx, 2+dx)#
	ypos <- with(lin, c(nMh/nM, nMw/nM, nFh/nF, nFw/nF))#
	plot(xpos, ypos, ylim=c(0,1), col=c(colM, colM, colF, colF), type="h", pch=15, lwd=5, axes = FALSE, ylab="Proportion", xlab="")#
	axis(2, las=1)#
	axis(1, at=xpos, labels=c("h", "w", "h", "w"))#
	axis(1, at=c(1, 2), labels=c("M", "F"), line=1.5, tick=FALSE)#
}#
plotfracs("tennis")
colM <- rgb(0, 150, 150, maxColorValue = 255)#
colF <- rgb(249, 113, 0, maxColorValue = 255)#
plotfracs <- function(cat){#
	lin <- xx[xx$cat==cat,]#
	print(lin)#
	dx <- 0.15#
	xpos <- c(1-dx, 1+dx, 2-dx, 2+dx)#
	ypos <- with(lin, c(nMh/nM, nMw/nM, nFh/nF, nFw/nF))#
	plot(xpos, ypos, ylim=c(0,1), col=c(colM, colM, colF, colF), type="h", pch=15, lwd=5, axes = FALSE, ylab="Proportion", xlab="")#
	axis(2, las=1)#
	axis(1, at=xpos, labels=c("h", "w", "h", "w"), lwd=0)#
	axis(1, at=c(1, 2), labels=c("M", "F"), line=1.5, tick=FALSE)#
}#
plotfracs("tennis")
colM <- rgb(0, 150, 150, maxColorValue = 255)#
colF <- rgb(249, 113, 0, maxColorValue = 255)#
plotfracs <- function(cat){#
	lin <- xx[xx$cat==cat,]#
	print(lin)#
	dx <- 0.15#
	xpos <- c(1-dx, 1+dx, 2-dx, 2+dx)#
	ypos <- with(lin, c(nMh/nM, nMw/nM, nFh/nF, nFw/nF))#
	plot(xpos, ypos, ylim=c(0,1), col=c(colM, colM, colF, colF), type="h", pch=15, lwd=5, axes = FALSE, ylab="Proportion", xlab="")#
	axis(2, las=1)#
	axis(1, at=xpos, labels=c("h", "w", "h", "w"), lwd=0, lwd.ticks=1)#
	axis(1, at=c(1, 2), labels=c("M", "F"), line=1.5, tick=FALSE)#
}#
plotfracs("tennis")
colM <- rgb(0, 150, 150, maxColorValue = 255)#
colF <- rgb(249, 113, 0, maxColorValue = 255)#
plotfracs <- function(cat){#
	lin <- xx[xx$cat==cat,]#
	print(lin)#
	dx <- 0.15#
	xpos <- c(1-dx, 1+dx, 2-dx, 2+dx)#
	ypos <- with(lin, c(nMh/nM, nMw/nM, nFh/nF, nFw/nF))#
	plot(xpos, ypos, ylim=c(0,1), col=c(colM, colM, colF, colF), type="h", pch=15, lwd=5, axes = FALSE, ylab="Proportion", xlab="")#
	axis(2, las=1)#
	axis(1, at=xpos, labels=c("h", "w", "h", "w"), lwd=0)#
	axis(1, at=c(1, 2), labels=c("M", "F"), line=1.5, tick=FALSE)#
}#
plotfracs("tennis")
colM <- rgb(0, 150, 150, maxColorValue = 255)#
colF <- rgb(249, 113, 0, maxColorValue = 255)#
plotfracs <- function(cat){#
	lin <- xx[xx$cat==cat,]#
	print(lin)#
	dx <- 0.15#
	xpos <- c(1-dx, 1+dx, 2-dx, 2+dx)#
	ypos <- with(lin, c(nMh/nM, nMw/nM, nFh/nF, nFw/nF))#
	plot(xpos, ypos, ylim=c(0,1), col=c(colM, colM, colF, colF), type="h", pch=15, lwd=5, axes = FALSE, ylab="Proportion", xlab="")#
	axis(2, las=1)#
	axis(1, at=xpos, labels=c("h", "w", "h", "w"), lwd=0, line=0)#
	axis(1, at=c(1, 2), labels=c("M", "F"), line=1.5, tick=FALSE)#
}#
plotfracs("tennis")
colM <- rgb(0, 150, 150, maxColorValue = 255)#
colF <- rgb(249, 113, 0, maxColorValue = 255)#
plotfracs <- function(cat){#
	lin <- xx[xx$cat==cat,]#
	print(lin)#
	dx <- 0.15#
	xpos <- c(1-dx, 1+dx, 2-dx, 2+dx)#
	ypos <- with(lin, c(nMh/nM, nMw/nM, nFh/nF, nFw/nF))#
	plot(xpos, ypos, ylim=c(0,1), col=c(colM, colM, colF, colF), type="h", pch=15, lwd=5, axes = FALSE, ylab="Proportion", xlab="")#
	axis(2, las=1)#
	axis(1, at=xpos, labels=c("h", "w", "h", "w"), lwd=0, line=-1)#
	axis(1, at=c(1, 2), labels=c("M", "F"), line=1.5, tick=FALSE)#
}#
plotfracs("tennis")
colM <- rgb(0, 150, 150, maxColorValue = 255)#
colF <- rgb(249, 113, 0, maxColorValue = 255)#
plotfracs <- function(cat){#
	lin <- xx[xx$cat==cat,]#
	print(lin)#
	dx <- 0.15#
	xpos <- c(1-dx, 1+dx, 2-dx, 2+dx)#
	ypos <- with(lin, c(nMh/nM, nMw/nM, nFh/nF, nFw/nF))#
	plot(xpos, ypos, ylim=c(0,1), col=c(colM, colM, colF, colF), type="h", pch=15, lwd=5, axes = FALSE, ylab="Proportion", xlab="")#
	axis(2, las=1)#
	axis(1, at=xpos, labels=c("h", "w", "h", "w"), lwd=0, line=-1)#
	axis(1, at=c(1, 2), labels=c("M", "F"), line=0.5, tick=FALSE)#
}#
plotfracs("tennis")
colM <- rgb(0, 150, 150, maxColorValue = 255)#
colF <- rgb(249, 113, 0, maxColorValue = 255)#
plotfracs <- function(cat){#
	lin <- xx[xx$cat==cat,]#
	print(lin)#
	dx <- 0.15#
	xpos <- c(1-dx, 1+dx, 2-dx, 2+dx)#
	ypos <- with(lin, c(nMh/nM, nMw/nM, nFh/nF, nFw/nF))#
	plot(xpos, ypos, ylim=c(0,1), col=c(colM, colM, colF, colF), type="h", pch=15, lwd=5, axes = FALSE, ylab="Proportion", xlab="")#
	axis(2, las=1)#
	axis(1, at=xpos, labels=c("h", "w", "h", "w"), lwd=1, lwd.ticks=0, line=-1)#
	axis(1, at=c(1, 2), labels=c("M", "F"), line=0.5, tick=FALSE)#
}#
plotfracs("tennis")
colM <- rgb(0, 150, 150, maxColorValue = 255)#
colF <- rgb(249, 113, 0, maxColorValue = 255)#
plotfracs <- function(cat){#
	lin <- xx[xx$cat==cat,]#
	print(lin)#
	dx <- 0.15#
	xpos <- c(1-dx, 1+dx, 2-dx, 2+dx)#
	ypos <- with(lin, c(nMh/nM, nMw/nM, nFh/nF, nFw/nF))#
	plot(xpos, ypos, ylim=c(0,1), col=c(colM, colM, colF, colF), type="h", pch=15, lwd=5, axes = FALSE, ylab="Proportion", xlab="")#
	lines(xpos, 0*xpos)#
	axis(2, las=1)#
	axis(1, at=xpos, labels=c("h", "w", "h", "w"), lwd=0, line=-1)#
	axis(1, at=c(1, 2), labels=c("M", "F"), line=0.5, tick=FALSE)#
}#
plotfracs("tennis")
colM <- rgb(0, 150, 150, maxColorValue = 255)#
colF <- rgb(249, 113, 0, maxColorValue = 255)#
plotfracs <- function(cat){#
	lin <- xx[xx$cat==cat,]#
	print(lin)#
	dx <- 0.15#
	xpos <- c(1-dx, 1+dx, 2-dx, 2+dx)#
	ypos <- with(lin, c(nMh/nM, nMw/nM, nFh/nF, nFw/nF))#
	plot(xpos, ypos, ylim=c(0,1), col=c(colM, colM, colF, colF), type="h", pch=15, lwd=5, axes = FALSE, ylab="Proportion", xlab="")#
	lines(xpos, 0*xpos)#
	axis(2, las=1)#
	axis(1, at=xpos, labels=c("h", "w", "h", "w"), lwd=0, line=-1)#
	axis(1, at=c(1, 2), labels=c("M", "F"), line=0.5, tick=FALSE)#
	title(cat)#
}#
plotfracs("tennis")
plotfracs("aaas")
plotfracs("ted")
plotfracs("actors")
plotfracs("ted")
Combine data for a given "category"#
getdata <- function(catname){#
	tmp <- read.csv(paste(catname, ".csv", sep=""), header=FALSE)#
	# Find duplicates#
	dupl <- duplicated(tmp$V1)#
#
	wife <- scan(paste(catname, "_wife.txt", sep=""))#
	husband <- scan(paste(catname, "_husband.txt", sep=""))#
	n <- length(wife) - sum(dupl)#
	# Combine data, removing duplicates#
	t2 <- cbind(tmp[!dupl,], wife=1-wife[!dupl], husband=1-husband[!dupl], cat=rep(catname, n))#
	return(t2)#
}#
#
t.aaas <- getdata("aaas")#
t.ted <- getdata("ted")#
t.tennis <- getdata("tennis")#
t.actors <- getdata("actors")#
t.hhmi <- getdata("hhmi")#
#
# Compute number of F, M, F husband, ...#
countsuggestions <- function(cat){#
	tab <- get(paste("t.", cat, sep=""))#
	nF <- sum(tab$V2=="F")#
	nM <- sum(tab$V2=="M")#
	nFw <- sum(tab$V2=="F" & tab$wife==1)#
	nMw <- sum(tab$V2=="M" & tab$wife==1)#
	nFh <- sum(tab$V2=="F" & tab$husband==1)#
	nMh <- sum(tab$V2=="M" & tab$husband==1)#
	out <- c(nF=nF, nM=nM, nFw=nFw, nMw=nMw, nFh=nFh, nMh=nMh)#
}#
#
cats <- list("actors", "tennis", "ted", "aaas")#
cts <- t(sapply(cats, countsuggestions))#
x <- data.frame(cts)#
xx <- cbind(data.frame(cat=unlist(cats)), x)#
names(xx) <- c("cat", dimnames(cts)[[2]])#
xx#
#
colM <- rgb(0, 150, 150, maxColorValue = 255)#
colF <- rgb(249, 113, 0, maxColorValue = 255)#
plotfracs <- function(cat){#
	lin <- xx[xx$cat==cat,]#
	print(lin)#
	dx <- 0.15#
	xpos <- c(1-dx, 1+dx, 2-dx, 2+dx)#
	ypos <- with(lin, c(nMh/nM, nMw/nM, nFh/nF, nFw/nF))#
	plot(xpos, ypos, ylim=c(0,1), col=c(colM, colM, colF, colF), type="h", pch=15, lwd=5, axes = FALSE, ylab="Proportion", xlab="")#
	lines(xpos, 0*xpos)#
	axis(2, las=1)#
	axis(1, at=xpos, labels=c("h", "w", "h", "w"), lwd=0, line=-1)#
	axis(1, at=c(1, 2), labels=c("M", "F"), line=0.5, tick=FALSE)#
	title(cat)#
}#
plotfracs("tennis")#
plotfracs("aaas")#
plotfracs("hhmi")#
plotfracs("ted")#
plotfracs("actors")
plotfracs("hhmi")
cats <- list("actors", "tennis", "ted", "aaas", "hhmi")#
cts <- t(sapply(cats, countsuggestions))#
x <- data.frame(cts)#
xx <- cbind(data.frame(cat=unlist(cats)), x)#
names(xx) <- c("cat", dimnames(cts)[[2]])#
xx#
#
colM <- rgb(0, 150, 150, maxColorValue = 255)#
colF <- rgb(249, 113, 0, maxColorValue = 255)#
plotfracs <- function(cat){#
	lin <- xx[xx$cat==cat,]#
	print(lin)#
	dx <- 0.15#
	xpos <- c(1-dx, 1+dx, 2-dx, 2+dx)#
	ypos <- with(lin, c(nMh/nM, nMw/nM, nFh/nF, nFw/nF))#
	plot(xpos, ypos, ylim=c(0,1), col=c(colM, colM, colF, colF), type="h", pch=15, lwd=5, axes = FALSE, ylab="Proportion", xlab="")#
	lines(xpos, 0*xpos)#
	axis(2, las=1)#
	axis(1, at=xpos, labels=c("h", "w", "h", "w"), lwd=0, line=-1)#
	axis(1, at=c(1, 2), labels=c("M", "F"), line=0.5, tick=FALSE)#
	title(cat)#
}#
plotfracs("tennis")#
plotfracs("aaas")#
plotfracs("hhmi")#
plotfracs("ted")#
plotfracs("actors")
plotfracs("hhmi")
t.hhmi[t.hhmi$wife==1]
t.hhmi[t.hhmi$wife==1,]
t.hhmi[t.hhmi$husband==1,]
plotfracs("hhmi")
